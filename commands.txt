Создание виртуального окружения
python -m venv venv

Активация виртуального окружения
venv\Scripts\activate.bat

Команды Git
pip install -r requirements.txt

pip freeze
pip freeze > requirements.txt


Разделение числа на элемнты с образование списка
bin_n = [int(bin_n) for bin_n in str(bin_n)]

Pandas
- (Series) -----------------------------------------------------------------------------------------
(.loc) - осуществляе поиск по метке индекса
(.iloc) - осуществляет поиск по позиции, начиная с 0
(parse_dates=) - указывает библиотеке pandas, что в итоговом датафрейме значения столбца с датами должны быть фактическими датами
(index_col=) - указывает, какой столбец в файле следует использовать в качестве индекса
(.values) - получение доступа ко всем значениям
(.index) - получение индекса для серии
(.shape) - кортеж с одним занчением
(.size) - позволяет узнать о кол-ве элементов в объекте Series !(len() также это может)!
(.head()) - возвращает первые 5 строк (можно изменить параметром n)
(.tail()) - возвращает последние 5 строк (можно изменить параметром n)
(.take()) - позволяет возвращать строки серии, соответствующие указанным целочисленным позициям
(.all()) - проверяет, все ли значения в объекте Series соответсвуют заданному выражению
(.any()) - возвращает значение True, если какое-нибудь значение удовлетворяет заданному выражению
(.sum()) - определяет кол-во элементов, удовлетворяющих условию
(.reindex()) - создание нового индекса
(fill_value=) - заменяет отсутствующие значения (NaN)
(method='ffill') - принцип "прямого заполнения"; с помощью параметра любым новым меткам индекса присваивается ранее извсетное значение,
отличное от NaN
(method='bfill') - принцип "обратного заполнения"; с помощью параметра любым новым меткам индекса присваивается ранее извсетное значение,
отличное от NaN, но в обратном порядке
(del()) - удаляет строки
- (DataFrame) --------------------------------------------------------------------------------------
(.colums) - получения доступа к столбцам
(columns=) - задает имена столбцов
(len()) - показывает кол-во строк
(.shape) - показывает размерность объекта DataFrame
(usecols=) - позволяет считывать конкретные столбцы
(len()) - позволяет узнать кол-во строк
(.size) - позволяет узнать кол-во значений в датарейме (размер)
(.loc) - осуществляе поиск по метке индекса (также позволяет делать срезы)
(.iloc) - осуществляет поиск по позиции, начиная с 0 (также позволяет делать срезы)
(.rename()) - позволяет переименовывать столбцы (возвращает новый датарейм с переименованным столбцом
и данными, скопированными из исходного датафрейма)
(inplace=True) - изменение датафрейма на месте без создания копии
([] или .insert()) - позволяет добавлять новые столбцы (модифицируют датафрейм на месте)
(.concat()) - добавляет новые столбцы в датафрейм (оставляет исходный датафрейм без изменений;
создает новый датафрейм на основе всех указанных объектов DataFrame)
(axis=) - параметр для .concat() указывающий на ось столбецов(1) или на ось строк(0) по которым
будет конкатенированы указанные объекты DataFrame
(del) - просто удаляет серию из объекта DataFrame (на месте)
(.pop()) - удаляет и возвращает в результате серию (на месте)
(.drop(labels, axis=1)) - возвращает новый датафрейм с удаленным столбцом (исходный объект DataFrame не будет изменен)
(.append()) - добавляет строки в объект DataFrame (без выравнивания)
(ignore_index=True) - игнорирует метки индекса, создает индекс по умолчанию
(keys=) - параметр позволяет определить, к какому датафрейму относится набор строк
(set_index([])) - задает индекс датафрейма, который соответсвует значения столбца
(.reset_index()) - позволяет сбросить индекс датафрейма, поместив содержимое индекса в один или несколько столбцов
(.reindex()) - создание нового индекса (операция создает новый DataFrame с указанными строками)
(.get_level_values()) - позволяет извлечь значения самого индекса в определенном уровне для каждой строки
(.xs()) - позволяет посмотреть значения датафрейма с помощью иеррхического индекса (с удалением уровня)
(drop_level=False) - позволяет использовать .xs() без удаления уровня
- Категории ----------------------------------------------------------------------------------------
(.categories) - позволяет смотреть категории
(.codes) - показывает коды (целочисленные значения) для каждого значения категориальной переменной
(.astype()) - позволяет преобразовать столбец с данными в категориальную переменную
(.cat) - позволяет получить доступ к категориальной переменной
(.cut()) - создает группы наблюдений, расположенных внутри определенных диапазонов значений
(ordered=True) - позволяет задать явный порядок категорий
(.categories = или .rename_categories()) - позволяют переименовывать категории (.categories - на месте,
.rename_categories() - не трогает исходные категории)
(.add_categories()) - позволяет добавлять категории
(.remove_categories()) - позволяет удалять категории
(.remove_unused_categories()) - позволяет удалять неиспользуемые категории
(.describe()) - вычисляет описательные статистики для объекта Categorical точно так же, как для объекта Series или DataFrame
(.value_counts()) - подсчитывает количество значений для каждой категории
----------------------------------------------------------------------------------------------------
(.sort_values()) - позволяет сортировать по столбцам
(.all() / .sub() / .mul() / .div()) - методы для выполнения арифметических операций
(.count()) - подсчитывает кол-во значений
(.unique()) - позволяет найти уникальные элементы
(.nunique()) - позволяет найти количество уникальных значений (исключая NaN)
(.nunique(dropna=False)) - позволяет найти количество уникальных значений (включая NaN)
(.value_counts()) - вычисляет встречемость каждого уникального значения для нечисловых данных
(.cumprod()) - вычисляет накопленное произведение
(.median()) - вычисляет медиану значений для каждого столбца
(.mode()) - вычисляет моду
(.var()) - вычисляет дисперсию значений для каждого столбца
(.std()) - вычисляет стандартное отклонение значений для каждого столбца
(.cov()) - вычисляет ковариацию
(.corr()) - вычисляет корреляцию
(.cut()) - выполняет дискретизацию
(labels=) - позволяет задать имя группы
(.qcut()) - разбивает на квантили (разбивает значения на группы так, чтобы в них попадало одинаковое кол-во элементов)
(.rank()) - позволяет ранжировать значения
(.pct_change()) - вычисляет процентное изменение для каждого наблюдения серии
(.rolling()) - позволяет создать скользящее окно
(window=) - позволяет устанавливать ширину окна
(.sample(replace=True)) - позволяет совершать случайную выборку (с возвращением)
(.sample()) - позволяет совершать случайную выборку (без возвращения)
(pd.read_csv()) - считывает CSV в DataFrame
(index_col=) - указывает, какой столбец в файле следует использовать в качестве индекса
(header=) - задет строку заголовков
(.to_csv()) - позволяет сохранять DataFrame в CSV-файл
(skiprows=) - позволяет считывать файл, пропустив указанные строки
(skipfooter=) - задает кол-во строк в конце файла, игнорируемых при чтении
(nrows=5) - позволяет считывать определенные строки
(.isnull()) - позволяет найти значения NaN в каждом столбце (True)
(.count()) - вычисляет кол-во значений, отличных от NaN в каждом столбце
(.notnull()) - определяет, какие элементы являются непропущенными значениями(True)
(.dropna()) - возвращает непропущенные значения (!!! не изменяет исходный датафрейм!!!; возвращает копию датафрейма) -> для столбца
(.dropna()) - удаляет строки, в которых есть NaN (!!! не изменяет исходный датафрейм!!!; возвращает копию датафрейма) -> для объекта DataFrame
(.fillna()) - заменяет значения NaN на определенные значения ((!!! не изменяет исходный датафрейм!!!; возвращает копию датафрейма))
(.interpolate())- выполняет линейную интерполяцию
(.duplicated()) - позволяет искать дублирующиеся строки
(.drop_duplicates()) - удаляет дублирующиеся строки
(.drop_duplicates(keep='last')) - удаляет дублирующиеся строки, каждый раз оставляя последнее из дублирующихся наблюдений
(.replace()) - заменяет конкретное значение на другое
(.apply()) - позволяет применять различные функции к каждому значению Series ( в датафреймах - к каждому столбцу)
(.applymap()) - позволяет применять различные функции к каждому значению
(.concat()) - выполняет конкатенацию (outer-join по умолчанию)
(join='inner') - изменяет тип соединения на внутренний
(ignore_index=True) - избавлятся от дублирования меток в итоговом индексе, игнорируя индексные метки в датафреймах-источиниках
(.merge() и pd.merge()) - позволяет выполнить слияние данных (по столбцам)
(on=) - задает столбец(ы), по которому(ым) будет проходить слияние
(.join()) - позволяет выполнить слияние данных (по меткам индекса)(outer по умолчанию)
!!! если столбцы в обоих объекта DataFrame не имеют уникальных имен, надо указать суффиксы с \
помощью параметров (lsuffix=) и (rsuffix=) !!!
(.pivot()) - поворачивает данные (надо указать параметр (columns=))
(pd.melt()) - выполняет "расплавление" данных
---------------------------------------------------------------------------------------------------
ГРУППИРОВКИ И АГРЕГАЦИИ
(.groupby()) - осуществляет "разделение"(группировку по значениям столбцов)
(.ngroups) - возвращает информацию о кол-ве групп, которые будут созданы
(.groups) - "что представляют из себя найденные группы?"
(.size()) - возвращает сводку о размере (кол-ве элементов) каждой группы
(.count()) - возвращает кол-во элементов в каждом столбце каждой группы
(.get_group()) - извлекает любую конкретную группу
(.head()) - извлекает первые строки в каждой группе
(.tail()) - извлекает последние строки в каждой группе
(.nth()) - извлекаем n-ю строку каждой группы
(.describe()) - вывод описательных статистик по каждой группе
(as_index=False) - создает числовой индекс и переносит уровни исходного индекса в столбцы
(.transform()) - для объекта GroupBy применяет функцию к каждому значению объекта DataFrame и возвращает
другой объект DataFrame(Идентично проиндексирован; Оставляет только те столбцы, к которым была
применена функция; Кол-во строк равно колличеству строк по всем группам)
(.filter()) - позволяет выборочно удалить группы данных из обработки(см.Data aggregation)



NumPy
(.linspace) - указывает количество значений, которые должны быть созданы между двумя указанными значениями включительно, для этого
задаем кол-во шагов


!!! Полезные функции!!!
-- Вспомогательная функция, печатующая содержимое групп
def print_groups(group_object):
    # итерируем по всем группам, печатая название группы и первые 5 наблюдений в группе
    for name, group in group_object:
        print(name)
        print(group[:5])

--
